#!/usr/bin/env python3

import yaml
import subprocess
import sys
from pathlib import Path
import argparse


def run_tmux_command(cmd):
    """Run a tmux command and return its output"""
    print(cmd)
    try:
        result = subprocess.run(['tmux'] + cmd, capture_output=True, text=True, check=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print('Error:', e)
        return None


def session_exists(session_name):
    """Check if a tmux session exists"""
    return run_tmux_command(['has-session', '-t', session_name]) is not None


def kill_all_sessions():
    """Kill all tmux sessions and stop tmux"""
    try:
        subprocess.run(['tmux', 'setw', '-g', 'detach-on-destroy', 'off'], check=True)
        subprocess.run(['tmux', 'kill-server'], check=True)
        print("All tmux sessions stopped and tmux server killed.")
    except subprocess.CalledProcessError as e:
        print(f"Failed to stop tmux sessions gracefully: {e}")
        sys.exit(1)


def create_session(config):
    """Create a new tmux session based on the config"""
    session_name = config['session_name']

    # Skip if session already exists
    if session_exists(session_name):
        return

    # Create the first window with the first window config
    first_window = config['windows'][0]
    run_tmux_command(['new-session', '-d', '-s', session_name, '-n', first_window['name']])

    # Run commands in the first window
    for cmd in first_window['commands']:
        run_tmux_command(['send-keys', '-t', f'{session_name}:0.0', cmd, 'C-m'])

    # Create additional windows
    for window_index, window in enumerate(config['windows'][1:], start=1):
        run_tmux_command(['new-window', '-t', f'{session_name}:{window_index}', '-n', window['name']])

        # Handle panes if specified
        if 'panes' in window:
            # First pane is created with the window
            for cmd in window['panes'][0]['commands']:
                run_tmux_command(['send-keys', '-t', f'{session_name}:{window_index}.0', cmd, 'C-m'])

            # Create additional panes
            for pane_index, pane in enumerate(window['panes'][1:], start=1):
                split_direction = '-h' if pane.get('split', 'vertical').lower() == 'horizontal' else '-v'
                run_tmux_command(['split-window', '-t', f'{session_name}:{window_index}',
                                  split_direction, '-l', f'{str(pane['size'])}%'])
                for cmd in pane['commands']:
                    run_tmux_command(['send-keys', '-t', f'{session_name}:{window_index}.{pane_index}',
                                      cmd, 'C-m'])

            # Maximize a pane if specified
            if window.get('maximize_pane') is not None:
                run_tmux_command(['resize-pane', '-t',
                                  f'{session_name}:{window_index}.{window["maximize_pane"]}', '-Z'])
        else:
            # Run commands in the window
            for cmd in window['commands']:
                run_tmux_command(['send-keys', '-t', f'{session_name}:{window_index}.0', cmd, 'C-m'])

    # Select the first window
    run_tmux_command(['select-window', '-t', f'{session_name}:0'])


def get_default_session(configs):
    """Get the default session name from configs"""
    for config in configs:
        if config.get('is_default', False):
            return config['session_name']
    return configs[0]['session_name']  # fallback to first session if no default specified


def start_sessions():
    """Start tmux sessions based on the configuration file"""
    config_path = Path.home() / '.config' / 'hyp' / 'config.yaml'

    if not config_path.exists():
        print(f"Config file not found: {config_path}")
        sys.exit(1)

    with open(config_path) as f:
        configs = list(yaml.safe_load_all(f))

    default_session = get_default_session(configs)

    # If default session exists, attach to it immediately
    if session_exists(default_session):
        subprocess.run(['tmux', 'attach', '-t', default_session])
        return

    # Otherwise create all sessions
    for config in configs:
        create_session(config)

    # Attach to the default session
    subprocess.run(['tmux', 'attach', '-t', default_session])


def main():
    parser = argparse.ArgumentParser(description="Manage tmux sessions.")
    parser.add_argument('--start', action='store_true', help="Start or attach to tmux sessions")
    parser.add_argument('--stop', '-s', action='store_true', help="Stop all tmux sessions and kill tmux")

    args = parser.parse_args()

    if args.stop:
        kill_all_sessions()
    else:
        # Default to `--start`
        start_sessions()


if __name__ == '__main__':
    main()